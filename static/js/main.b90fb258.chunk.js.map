{"version":3,"sources":["styles/colores.js","components/ColorBox.js","components/FormTask.js","components/tasks.js","App.js","index.js"],"names":["allColors","mainColor","colors","LaberColor","styled","label","color","InputRadio","input","ColorBox","handleChangeColor","isChecked","defaultChecked","id","type","name","onChange","htmlFor","Input","Button","button","ColorsContainer","div","Tareas","handleSubmit","colorSelected","onSubmit","map","nanoid","TasksContainer","TaskButton","Tasktext","p","done","Task","title","handleCompleteTask","handleDeleteTask","onClick","GlobalStyle","createGlobalStyle","App","state","tasks","e","preventDefault","target","value","trim","createNewTask","newTask","allTasks","setState","getTask","find","task","handleCompleteTasks","currentTasks","index","indexOf","filter","this","length","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b90fb258.chunk.js","sourcesContent":["const allColors = {\r\n    mainColor: '#387ef5',\r\n    colors: [\r\n        \"#5d5768\",\r\n        \"#53c4ff\",\r\n        \"#ff3333\",\r\n        \"#0A33ff\"\r\n    ]\r\n}\r\n\r\nexport default allColors;","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nconst LaberColor = styled.label`\r\n    display:inline-block;\r\n    width: 30px;\r\n    height: 30px;\r\n    margin-top: .5rem;\r\n    background-color: ${({color}) => color};\r\n    border-radius: 5px;\r\n`\r\n\r\nconst InputRadio = styled.input`\r\n    display:none;\r\n    &:checked + label{\r\n        border: 1px solid #fff;\r\n    }\r\n`\r\n\r\nconst ColorBox = ({color, handleChangeColor, isChecked}) => (\r\n    <>\r\n        <InputRadio\r\n        defaultChecked={isChecked}  //color por defecto cuando se monta el componente\r\n         id={color}\r\n         type=\"radio\" \r\n         name=\"color\"\r\n         onChange={() =>handleChangeColor(color)}/>     {/* selecciona el color*/}\r\n        <LaberColor htmlFor={color} color={color}></LaberColor>\r\n    </>\r\n)\r\n \r\nexport default ColorBox","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport allColors from '../styles/colores'\r\nimport ColorBox from './ColorBox'\r\nimport {nanoid} from 'nanoid'\r\nconst Input = styled.input`\r\nborder: none;\r\nborder-bottom: 1px solid ${allColors.mainColor};\r\nbackground: none;\r\noutline: none;\r\ncolor: ${allColors.mainColor};\r\n`\r\n\r\nconst Button = styled.button`\r\n    background-color: transparent;\r\n    border: 1px solid ${allColors.mainColor};\r\n    border-radius: 5px;\r\n    color: ${allColors.mainColor};\r\n    padding: .3rem .5rem;\r\n    cursor: pointer;\r\n    outline: none;\r\n\r\n    &:hover{\r\n        background-color: ${allColors.mainColor};\r\n        color:#222;\r\n    }\r\n`\r\n\r\nconst ColorsContainer = styled.div`\r\n    display: flex;\r\n    justify-content: space-between;\r\n    aling-items: center;\r\n    width: 150px;\r\n    margin: 0 auto .5rem;\r\n`\r\n\r\nconst Tareas = ({handleChangeColor, handleSubmit, colorSelected}) => (\r\n    <form onSubmit={handleSubmit}>\r\n        <Input name=\"title\" type=\"text\"/>\r\n        <ColorsContainer>\r\n            {\r\n                allColors.colors.map(color => (\r\n                    <ColorBox \r\n                        handleChangeColor={handleChangeColor} //evento que viene de app para selecionar el color\r\n                        color={color}  \r\n                        key={nanoid()}\r\n                        isChecked={colorSelected === color} //establecemos el colorBox por defecto\r\n                        />\r\n                ))\r\n            }\r\n        </ColorsContainer>\r\n        <Button>Add Task</Button>\r\n    </form>\r\n)\r\n\r\nexport default Tareas","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nconst TasksContainer = styled.div`\r\n    display:grid;\r\n    grid-template-columns: 30px 1fr 50px;\r\n    justify-items:start;\r\n    align-items:center;\r\n    padding: 0 1rem;\r\n    background-color:${({color}) => color};\r\n    width:100%;\r\n    max-width:250px;\r\n    margin: 1rem auto;\r\n    border-radius: 5px;\r\n`\r\n\r\nconst TaskButton = styled.button`\r\n    font-size:.8rem;\r\n    background-color:transparent;\r\n    border: 1px solid #fff;\r\n    color:#fff;\r\n    padding: .3rem .5rem;\r\n    border-radius: 10px;\r\n    cursor: pointer;\r\n    outline: none;\r\n\r\n    &:hover{\r\n        background-color: #fff;\r\n        color: #222;\r\n    }\r\n`\r\n\r\nconst Tasktext = styled.p`\r\n    color:#fff;\r\n    text-decoration: ${({done}) => done ? 'line-through' : 'none'}; //no funca\r\n`\r\n\r\nconst Task = ({color, title, done, handleCompleteTask, handleDeleteTask}) =>(\r\n    <TasksContainer color={color}>\r\n        <input \r\n        type=\"checkbox\" \r\n        onChange={handleCompleteTask}\r\n        defaultChecked={done}\r\n        />\r\n        <Tasktext done={done}>{title}</Tasktext>\r\n        <TaskButton onClick={handleDeleteTask}>Delete</TaskButton>\r\n    </TasksContainer>\r\n)\r\n\r\nexport default Task","import React ,{ Component} from 'react';\nimport {createGlobalStyle} from 'styled-components'\nimport allColors from './styles/colores'\nimport Tareas from './components/FormTask'\nimport Task from './components/tasks'\nimport {nanoid} from 'nanoid'\nconst GlobalStyle = createGlobalStyle`\n    body{\n        font-family: sans-serif;\n        background-color:#222;\n        color:${allColors.mainColor};\n        text-align: center;\n        margin:0px; \n    }\n`\n\nclass App extends Component{\n\n\n    state = {\n        colorSelected:allColors.colors[0],\n        tasks: [  // estructura de las tareas\n          {\n            title: 'aprender firebase',\n            color: allColors.colors[0],\n            done:false  //atributo que controla si la tarea esta terminada\n          }\n        ]\n    }\n \n    handleSubmit = (e) => { \n      e.preventDefault()\n      if(e.target.title.value.trim() !== ''){\n        this.createNewTask(e.target.title.value)  //creamos nueva tarea\n        e.target.title.value = ''   //vaciamos el formulario una vez creada la tarea\n      }\n    } \n\n    createNewTask = (title) => {\n      const newTask = {\n        id:nanoid(),\n        title,\n        color: this.state.colorSelected,\n        done:false\n      }\n\n      const allTasks = [...this.state.tasks, newTask]\n\n      this.setState({tasks: allTasks})\n    }\n\n    getTask = (id) => {\n      const task = this.state.tasks.find(task => task.id === id)\n      return task\n    }\n\n    handleCompleteTasks = (id) => {\n      const currentTasks = this.state.tasks\n      const task = this.getTask(id)\n      const index = currentTasks.indexOf(task)\n\n      currentTasks[index].done = !currentTasks[index].done\n\n      this.setState({tasks: currentTasks})\n    }\n\n    handleDeleteTask = (id) => {\n      let currentTasks = this.state.tasks\n      currentTasks = currentTasks.filter(task=> task.id !== id)\n\n      this.setState({tasks : currentTasks})\n    }\n\n    handleChangeColor = (color) => {\n      this.setState({colorSelected: color})   //evento para seleccionar el color\n    }\n\n  render() {\n    const {colorSelected, tasks} = this.state\n    return(\n      <>\n        <GlobalStyle/>\n        <h1>To do list</h1>\n        <Tareas handleChangeColor={this.handleChangeColor}\n                handleSubmit={this.handleSubmit}\n                colorSelected = {colorSelected}\n        />\n\n        {this.state.tasks.length === 0 && <h2>not tasks yet</h2>}\n      <div>\n        {\n          tasks.map(task=>(   //mostramos tareas en pantalla\n            <Task\n                key={nanoid()} \n                done={task.done}\n                title={task.title}\n                color={task.color}\n                handleCompleteTasks={() => this.handleCompleteTasks(task.id)}\n                handleDeleteTask={() =>this.handleDeleteTask(task.id)}\n            />\n          ))\n        }\n      </div>\n      </>\n    )\n  }\n  \n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />,document.getElementById('root'));\n\n\n"],"sourceRoot":""}